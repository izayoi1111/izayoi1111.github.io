<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2025/02/26/%E7%AE%97%E6%B3%95/"/>
    <url>/2025/02/26/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-相向双指针问题"><a href="#1-相向双指针问题" class="headerlink" title="1. 相向双指针问题"></a>1. 相向双指针问题</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/">167. 两数之和 II - 输入有序数组 - 力扣（LeetCode）</a></p><p><strong>核心思路</strong>：<strong>用 O(1) 的时间得知 O(n) 的信息</strong></p><p>暴力解：时间复杂度O(n^2)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numbers.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;numbers.<span class="hljs-built_in">size</span>();j++)&#123;<br>                <span class="hljs-keyword">if</span>(numbers[i]+numbers[j]==target)&#123;<br>                    <span class="hljs-keyword">return</span> &#123;i<span class="hljs-number">+1</span>,j<span class="hljs-number">+1</span>&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>数组的长度用numbers.size()取得</p><p>注意for循环的边界判断，区别小于、小于等于情况下的边界值。</p></blockquote><p>相向指针：O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> j=numbers.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            <span class="hljs-keyword">if</span>(numbers[i]+numbers[j]==target)&#123;<br>                <span class="hljs-keyword">return</span> &#123;i<span class="hljs-number">+1</span>,j<span class="hljs-number">+1</span>&#125;;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(numbers[i]+numbers[j]&lt;target)&#123;<br>                i+=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                j-=<span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>延申：若无空间要求则可采用哈希表</p><p><a href="https://leetcode.cn/problems/two-sum/solutions/434597/liang-shu-zhi-he-by-leetcode-solution/">1. 两数之和 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; hashtable;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">auto</span> it=hashtable.<span class="hljs-built_in">find</span>(target-nums[i]);<br>            <span class="hljs-keyword">if</span>(it!=hashtable.<span class="hljs-built_in">end</span>())&#123;<br>                <span class="hljs-keyword">return</span> &#123;it-&gt;second,i&#125;;<br>            &#125;<br>            hashtable[nums[i]]=i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>哈希表的下标表示数值，表的内容表示该数值在数组中的序号</p><p>哈希表的定义：unordered_map&lt;int,int&gt; hashtable</p><p>hashtable.find()返回的值是对应哈希表元素的序号</p><p>hashtable.end()返回的值是哈希表结束元素的下一个序号</p><p>本题中若it &#x3D; hashtable.end() 则证明查找失败，不存在和i相加等于target的元素</p></blockquote><p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和 - 力扣（LeetCode）</a></p><p>固定一个数值，转为两项和问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        ranges::<span class="hljs-built_in">sort</span>(nums);<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>            <span class="hljs-type">int</span> x=nums[i];<br>            <span class="hljs-keyword">if</span>(i&amp;&amp;x==nums[i<span class="hljs-number">-1</span>]) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//跳过重复</span><br>            <span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;<br>            <span class="hljs-type">int</span> k=n<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(j&lt;k)&#123;<br>                <span class="hljs-keyword">if</span>(x+nums[j]+nums[k]==<span class="hljs-number">0</span>)&#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(&#123;x,nums[j],nums[k]&#125;);<br>                    <span class="hljs-keyword">for</span>(j++;j&lt;k&amp;&amp;nums[j]==nums[j<span class="hljs-number">-1</span>];j++);<span class="hljs-comment">//跳过重复</span><br>                    <span class="hljs-keyword">for</span>(k--;k&gt;j&amp;&amp;nums[k]==nums[k<span class="hljs-number">+1</span>];k--);<span class="hljs-comment">//跳过重复</span><br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x+nums[j]+nums[k]&lt;<span class="hljs-number">0</span>) j+=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> k-=<span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>ranges::sort(nums); 表示调用ranges库中的sort函数</p><p>vector&lt;vector<int>&gt; 表示建立一个二维动态数组,push_back({x,nums[j],nums[k]})表示向该数组中加入值为x,nums[j],nums[k]}的行</p><p>if(i&amp;&amp;x&#x3D;&#x3D;nums[i-1]) continue; i为了保证数组不越界访问</p><p>可能的死循环问题：当三数和为0时需要对j和k的值进行修改</p></blockquote><p><a href="https://leetcode.cn/problems/count-pairs-whose-sum-is-less-than-target/">2824. 统计和小于目标的下标对数目 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countPairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        ranges::<span class="hljs-built_in">sort</span>(nums);<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]+nums[j]&lt;target)&#123;<br>                count+=j-i;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">else</span> j--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>整体思路相似，count+&#x3D;j-i这一步需注意</p></blockquote><p><a href="https://leetcode.cn/problems/3sum-closest/solutions/2337801/ji-zhi-you-hua-ji-yu-san-shu-zhi-he-de-z-qgqi/">16. 最接近的三数之和 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">threeSumClosest</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        ranges::<span class="hljs-built_in">sort</span>(nums);<br>        <span class="hljs-type">int</span> ans;<br>        <span class="hljs-type">int</span> min_dif=INT_MAX;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">int</span> max=nums[n<span class="hljs-number">-1</span>]+nums[n<span class="hljs-number">-2</span>]+nums[n<span class="hljs-number">-3</span>];<br>        <span class="hljs-type">int</span> min=nums[<span class="hljs-number">0</span>]+nums[<span class="hljs-number">1</span>]+nums[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(target&gt;max) <span class="hljs-keyword">return</span> max;<br>        <span class="hljs-keyword">if</span>(target&lt;min) <span class="hljs-keyword">return</span> min;<br><br>        <span class="hljs-keyword">for</span>(i;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>            <span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>,k=n<span class="hljs-number">-1</span>;<br>            <br>            <span class="hljs-keyword">while</span>(j&lt;k)&#123;<br>                <span class="hljs-type">int</span> s=nums[i]+nums[j]+nums[k];<br>                <span class="hljs-keyword">if</span>(s==target) <span class="hljs-keyword">return</span> target;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s&lt;target)&#123;<br>                    <span class="hljs-keyword">if</span>(target-s&lt;min_dif)&#123;<br>                        min_dif=target-s;<br>                        ans=s;<br>                    &#125;<br>                    j++;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(s-target&lt;min_dif)&#123;<br>                        min_dif=s-target;<br>                        ans=s;<br>                    &#125;<br>                    k--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>整体思路类似于上文的三数之和，为了提高时间效率多做了几种判断，一般情况下，依然采取固定一个数字，剩下的两个数字采取相向指针的方法进行遍历。</p></blockquote><p><a href="https://leetcode.cn/problems/4sum/">18. 四数之和 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">fourSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target) &#123;<br>        ranges::<span class="hljs-built_in">sort</span>(nums);<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-3</span>;i++)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> x=nums[i];<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;n<span class="hljs-number">-2</span>;j++)&#123;<br>                <span class="hljs-type">long</span> <span class="hljs-type">long</span> y=nums[j];<br>                <span class="hljs-keyword">if</span>(j&gt;i<span class="hljs-number">+1</span>&amp;&amp;nums[j]==nums[j<span class="hljs-number">-1</span>]) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-type">int</span> m=j<span class="hljs-number">+1</span>;<br>                <span class="hljs-type">int</span> r=n<span class="hljs-number">-1</span>;<br>                <span class="hljs-type">long</span> <span class="hljs-type">long</span> s;<br>                <span class="hljs-keyword">while</span>(r&gt;m)&#123;<br>                    s=x+y+nums[m]+nums[r];<br>                    <span class="hljs-keyword">if</span>(s&lt;target)&#123;<br>                        m++;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s&gt;target)&#123;<br>                        r--;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i],nums[j],nums[m],nums[r]&#125;);<br>                        <span class="hljs-keyword">for</span>(++m;m&lt;r&amp;&amp;nums[m]==nums[m<span class="hljs-number">-1</span>];m++);<br>                        <span class="hljs-keyword">for</span>(--r;m&lt;r&amp;&amp;nums[r]==nums[r<span class="hljs-number">+1</span>];r--);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>if(i&gt;0&amp;&amp;nums[i]&#x3D;&#x3D;nums[i-1]) continue;是为了保证没有重复的元组。</p><p>把4个元素视为1+1+2，前两个1表示分别进行遍历，2表示作为一组利用前后指针进行循环，不存在数据重复问题，所以只需要对i、j进行限制</p><p>此外注意数值上限问题，避免溢出。</p></blockquote><p><a href="https://leetcode.cn/problems/valid-triangle-number/">611. 有效三角形的个数 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">triangleNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        ranges::<span class="hljs-built_in">sort</span>(nums);<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> right=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>                <span class="hljs-keyword">if</span>(nums[left]+nums[right]&gt;nums[i])&#123;<br>                    ans+=right-left;<br>                    right--;<br>                &#125;<br>                <span class="hljs-keyword">else</span> left++;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>大体思路类似，区别在于由于三角形的性质，本题固定最大的数。</p></blockquote><p><a href="https://leetcode.cn/problems/container-with-most-water/solutions/1974355/by-endlesscheng-f0xz/">11. 盛最多水的容器 - 力扣（LeetCode）</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=height.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> area=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> Maxarea=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-type">int</span> length=right-left;<br>            <span class="hljs-keyword">if</span>(height[left]&lt;height[right])&#123;<br>                area=height[left]*length;<br>                left++;<br>                <span class="hljs-keyword">if</span>(area&gt;Maxarea) Maxarea=area;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                area=height[right]*length;<br>                right--;<br>                <span class="hljs-keyword">if</span>(area&gt;Maxarea) Maxarea=area;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Maxarea;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>本质仍然是双指针，只需判断好指针的移动情况。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器编程</title>
    <link href="/2025/02/25/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/02/25/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-TCP-IP协议族"><a href="#1-TCP-IP协议族" class="headerlink" title="1. TCP&#x2F;IP协议族"></a>1. TCP&#x2F;IP协议族</h2><p>TCP&#x2F;IP协议族是四层协议系统，分为数据链路层、网络层、传输层、应用层。</p><ol><li><p>数据链路层：使用ARP、RARP协议，向上层隐瞒不同物理网络不同的电气特性，实现IP地址与物理地址之间的相互转换。</p></li><li><p>网络层：使用ICMP、IP协议，向上层隐瞒网络拓扑结构，传输层认为主机之间是相互直连的，ICMP协议用于检测网络连接，使用同处于网络层的IP协议提供的功能。</p></li><li><p>传输层：使用TCP、UDP、SCTP协议，为应用层提供一条端到端的逻辑通信链路。TCP协议提供可靠的、面向连接的、基于流的服务，使用超时重传、数据确认等方式保证数据包的正确发送。</p><blockquote><p>TCP提供连接的状态、读写缓冲区、定时器等数据结构。</p></blockquote></li></ol><p>​UDP提供无连接、不可靠、基于数据报的服务，不保证数据的正确传送。</p><p>​SCTP协议是一种较新的传输层协议，在此处不进行讨论。</p><ol start="4"><li>应用层：使用telnet、OSPF、DNS等协议，在用户空间中实现，负责文件传输、名称查询、网络管理等。应用层协议既可以跳过传输层直接使用网络层提供的服务，又可以适配TCP协议和UDP协议。</li></ol><p>封装是指每层协议在上层数据的基础上加入自己的头部信息以实现该层的功能。</p><ol><li><p>TCP报文段包括TCP头部信息、TCP内核发送缓冲区。</p></li><li><p>UDP数据包与TCP报文段相似，不同的是UDP报文段不保存应用层数据副本，即，当一个UDP数据报成功发送时，UDP内核缓冲区中的该数据报就被丢弃了，如果打算重新发送该数据报需要重新从用户空间将该数据报拷贝到UDP内核发送缓冲区中。</p></li><li><p>IP数据报包括头部信息与数据部分，数据部分就是一个TCP报文段或其他传输层数据单位。</p></li><li><p>帧的类型取决于传输媒介，如以太网帧、令牌环帧等。帧的最大传输单元（MTU)为1500字节，其中数据部分范围为46-1500字节。</p><blockquote><p>数据部分最小值详见计算机网络部分。</p></blockquote></li></ol><p>分用：帧沿着协议栈自底向上传输的过程。</p><p>socket：使应用程序能够访问下三层协议的一组系统调用。</p><h1 id="2-IP协议"><a href="#2-IP协议" class="headerlink" title="2. IP协议"></a>2. IP协议</h1><p>IP协议提供无状态、无连接、不可靠的服务。</p><blockquote><p>无状态：简单、高效，但IP数据报之间相互独立，无法处理乱序或重复的数据报。</p><p>无连接：通信双方不长久的维持对方任何信息。</p><p>不可靠：不能保证IP数据报准确到达，只是尽最大努力。</p></blockquote><h1 id="3-TCP协议"><a href="#3-TCP协议" class="headerlink" title="3. TCP协议"></a>3. TCP协议</h1><p>TCP特点是面向连接、字节流、可靠传输。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深入TinyWebServer</title>
    <link href="/2025/02/25/%E6%B7%B1%E5%85%A5TinyWebServer/"/>
    <url>/2025/02/25/%E6%B7%B1%E5%85%A5TinyWebServer/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TinyWebServer的复现</title>
    <link href="/2025/02/25/TinyWebServerNotes/"/>
    <url>/2025/02/25/TinyWebServerNotes/</url>
    
    <content type="html"><![CDATA[<p>本文章基于<a href="https://blog.csdn.net/weixin_46653651/article/details/133420059">（一）TinyWebServer的环境配置与运行-CSDN博客</a>与<a href="https://blog.csdn.net/m0_47710003/article/details/144442735">TinyWebserver【一】配置与运行-CSDN博客</a>实现，仅用于个人总结与补充。</p><p>本文章更倾向于是对hexo博客功能的探索与复现过程的简单记录。</p><ol><li><p>安装VMware与Ubuntu系统，创建虚拟机用于实验。</p></li><li><p>安装mysql等Ubuntu需要的程序。</p></li><li><p>克隆代码并编译运行。</p><blockquote><p>main.cpp中只需要修改databasename，因为克隆得到的文件夹本身权限即为root，若修改登录名与密码，则需通过chmod命令更改TinyWebServer文件夹的属性，使其可以被读写。</p></blockquote></li><li><p>压力测试</p><p><img src="D:\blog\myblog\source_posts\TinyWebServerNotes\image-20250225174127054.png" alt="压力测试"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/25/hello-world/"/>
    <url>/2025/02/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
